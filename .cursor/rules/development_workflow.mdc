---
description: 
globs: 
alwaysApply: true
---
# 開発ワークフロールール

## 作業開始時の手順

### 1. 現状確認
毎回の作業開始時に以下を確認：
- [tasks.md](mdc:docs/tasks.md) で今日のタスクを確認
- 進行中のタスクの完了条件を再確認
- ブロッカーや依存関係をチェック
- **TDD**: 前回のテストがすべて通るか確認
- **TDD**: 今日実装する機能のテスト設計

### 2. 環境準備
- 最新コードを pull
- 必要な依存関係をインストール/更新
- 開発環境の動作確認

### 3. タスク着手
- タスクの完了条件を明確化
- 必要に応じて subtask に分割
- 開始時刻を記録

## 実装時のベストプラクティス

### TDD (Test Driven Development)
プロジェクト全体でテスト駆動開発を徹底する：

1. **🔴 Red**: 失敗するテストを先に書く
   - 機能の期待動作を明確化
   - エラーケースも含めてテスト設計
   - [tdd_guide.md](mdc:docs/tdd_guide.md) の具体例を参考

2. **🟢 Green**: テストが通る最小限のコードを実装
   - 過度な実装は避ける
   - まず動くことを優先
   - エラーハンドリングも同時実装

3. **🔵 Refactor**: コードを改善・整理
   - 重複コード除去
   - 可読性向上
   - パフォーマンス最適化

**TDD適用箇所**:
- **必須**: 音声認識・Geminiリライト・PDF生成のコアロジック
- **推奨**: UI コンポーネント・API エンドポイント
- **例外**: プロトタイプ・実験的機能

**テストカバレッジ目標**:
- 全体: 80%以上
- 重要機能: 90%以上  
- API: 95%以上

### 小さなコミット
- 機能単位でコミット
- コミットメッセージは日本語で具体的に
- 1コミット = 1つの論理的変更

### コミットメッセージ形式
```
[カテゴリ] 簡潔な変更内容

詳細な説明（必要に応じて）

- 変更点1
- 変更点2

関連: #issue番号
```

**カテゴリ例**:
- `feat` 新機能追加
- `fix` バグ修正
- `docs` ドキュメント更新
- `refactor` リファクタリング
- `test` テスト追加・修正
- `style` コードスタイル調整

## デバッグ手順

### 1. 問題の特定
- エラーメッセージの詳細を確認
- ログを詳しく調査
- 再現手順を明確化

### 2. 仮説立て
- 原因の仮説を複数立てる
- 最も可能性の高いものから検証
- 検証方法を明確化

### 3. 修正・検証
- 小さな変更で修正
- テストで回帰がないか確認
- ドキュメント更新

## ペアプログラミング

### Driver/Navigator
- **Driver**: コードを書く人
- **Navigator**: 設計・レビューする人
- 15-30分で役割交代

### リモートペアプロ
- 画面共有で実施
- コミュニケーションを密に
- 疲れたら適度に休憩

## コードレビュー

### レビュー観点
- 機能要件を満たしているか
- コード品質（可読性・保守性）
- テストカバレッジ
- セキュリティ上の問題
- パフォーマンスへの影響

### レビューのマナー
- 建設的なフィードバック
- 理由を明確に説明
- 代替案も提示
- 相手を尊重した言葉遣い

## トラブルシューティング

### よくある問題と対処法

#### Flutter Web ビルドエラー
```bash
# キャッシュクリア
flutter clean
flutter pub get

# ビルド再実行
flutter build web
```

#### API接続エラー
1. ネットワーク接続確認
2. API キーの有効性確認
3. エンドポイント URL の確認
4. CORS 設定の確認

#### Gemini API レート制限
- リクエスト間隔を調整
- バッチ処理で効率化
- エラーハンドリングでリトライ実装

### 困ったときの相談先
1. **技術的な問題**: Google Cloud ドキュメント
2. **Flutter関連**: Flutter 公式ドキュメント
3. **設計判断**: チームメンバーと相談
4. **要件不明**: [REQUIREMENT.md](mdc:docs/REQUIREMENT.md) を確認

## 作業終了時の手順

### 1. 成果物の確認
- 実装した機能の動作確認
- テストの実行・成功確認
- コードコミット・プッシュ

### 2. ドキュメント更新
- 実装内容に応じて設計書更新
- API変更があれば仕様書更新
- README の更新（必要に応じて）

### 3. タスク状況更新
- [tasks.md](mdc:docs/tasks.md) の進捗更新
- 完了したタスクにチェック
- 明日のタスクを明確化

### 4. 振り返り
- 今日の成果と課題を記録
- 学んだことをメモ
- 改善点があれば記録

## 効率化のコツ

### ショートカット活用
- VS Code / Cursor の効率的な使い方
- ターミナルでの作業効率化
- Git操作の効率化

### ツール活用
- ホットリロードの活用
- デバッガーの効果的な使い方
- プロファイラーでのパフォーマンス分析

### 学習方法
- 公式ドキュメントを第一参照
- 実装しながら学ぶ
- コミュニティの活用

## 品質保証

### 定期的な品質チェック
- **毎日**: 単体テスト実行
- **週次**: 統合テスト実行
- **リリース前**: 手動テスト実施

### パフォーマンス監視
- レスポンス時間の計測
- メモリ使用量の確認
- CPU使用率の監視

### セキュリティチェック
- 依存関係の脆弱性スキャン
- API キーの漏洩チェック
- 入力値検証の確認

# 開発フロー・ツール設定

## 🚀 必須ツール設定

### Flutter 開発ツール
```bash
# 静的解析
flutter analyze

# テスト実行
flutter test

# フォーマット
dart format .

# 依存関係更新
flutter pub get
```

### Python 開発ツール
```bash
# 依存関係インストール
pip install flake8 black mypy pytest pytest-cov

# 静的解析
flake8 app/
mypy app/

# フォーマット
black app/

# テスト実行
pytest --cov=app tests/
```

## 📋 開発フロー（毎回必須）

### 作業開始時
- [ ] [docs/tasks.md](mdc:docs/tasks.md) で今日のタスク確認
- [ ] 前回のテスト実行・通過確認
- [ ] 今日の機能のテスト設計

### 実装時（TDDサイクル）
- [ ] 🔴 Red: テスト先行作成（失敗する状態）
- [ ] 🟢 Green: 最小限の実装でテスト通過
- [ ] 🔵 Refactor: コード品質向上・リファクタリング

### 終了時
- [ ] 成果確認・全テスト通過
- [ ] ドキュメント更新
- [ ] [docs/tasks.md](mdc:docs/tasks.md) 進捗更新
- [ ] 明日のタスク明確化

## 🔧 VS Code設定（推奨）

### settings.json
```json
{
  "dart.lineLength": 100,
  "python.linting.enabled": true,
  "python.linting.flake8Enabled": true,
  "python.formatting.provider": "black",
  "[python]": {
    "editor.formatOnSave": true
  },
  "[dart]": {
    "editor.formatOnSave": true
  }
}
```

## ⚡ pre-commit設定

### .pre-commit-config.yaml
```yaml
repos:
  - repo: local
    hooks:
      - id: flutter-analyze
        name: Flutter Analyze
        entry: flutter analyze
        language: system
        pass_filenames: false
        
      - id: flutter-test
        name: Flutter Test
        entry: flutter test
        language: system
        pass_filenames: false
        
      - id: python-black
        name: Black
        entry: black
        language: system
        types: [python]
        
      - id: python-flake8
        name: Flake8
        entry: flake8
        language: system
        types: [python]
```

## 📊 品質メトリクス

### 目標指標
- **テストカバレッジ**: 全体80%以上、重要機能90%以上
- **静的解析**: エラー0件、警告最小化
- **パフォーマンス**: UI応答<100ms、API応答<500ms
- **セキュリティ**: 脆弱性スキャン月1回実施

### チェックコマンド
```bash
# Flutter
flutter analyze
flutter test --coverage
flutter run --profile -d chrome

# Python
flake8 app/
mypy app/
pytest --cov=app --cov-report=html tests/
```

## 🐛 デバッグ・トラブルシューティング

### よくある問題

#### Flutter Web
```bash
# キャッシュクリア
flutter clean
flutter pub get

# Chrome開発者ツール > Application > Storage > Clear site data
```

#### Firebase接続エラー
- web/index.html のFirebase設定確認
- Firebase Console プロジェクト設定の確認

#### CORS エラー
- backend の CORS設定確認
- FastAPIのadd_middleware設定確認

#### Provider状態管理エラー
- Providerのライフサイクル確認
- Consumer ウィジェットの適切な配置確認

## 🤝 コミット・PR ルール

### コミットメッセージ
```
[FEAT] 音声入力UIのリアルタイム字幕機能を実装
[FIX] エディタ画面のプレビュー表示バグ修正
[REFACTOR] Provider状態管理の最適化
[TEST] 音声入力ウィジェットのテスト追加
[DOCS] README・API仕様書の更新
```

### プルリクエスト前チェック
- [ ] `flutter analyze` エラー0件
- [ ] `flutter test` 全テスト通過
- [ ] `flake8 app/` エラー0件
- [ ] `pytest --cov=app tests/` カバレッジ80%以上
- [ ] UI/UXレビュー（デザインシステム準拠）
- [ ] パフォーマンスチェック（Chrome DevTools）

参照: [CODING_GUIDELINES.md](mdc:CODING_GUIDELINES.md) の詳細なツール設定
