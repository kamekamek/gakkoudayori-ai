---
description: 
globs: 
alwaysApply: true
---
# タスク管理ルール

## 基本方針
- [tasks.md](mdc:docs/tasks.md) を実装の中心管理ファイルとして使用
- タスク完了時は必ず完了条件をすべて検証してからチェック
- 実装順序は依存関係と優先度を考慮して決定

## タスク完了プロセス

### 1. 実装前確認
各タスクを開始する前に以下を確認：
- 依存するタスクが完了済みか
- 必要なリソース・ツールが準備できているか
- 完了条件が明確に定義されているか

### 2. 実装中の管理
- コード変更は小さな単位で commit
- 機能実装と同時にテストコードも作成
- ドキュメント更新を忘れずに実施

### 3. 完了条件検証
タスクを完了とマークする前に、以下の4条件をすべて満たすことを確認：

#### ✅ 機能実装
- コードが正常に動作する
- 期待される機能をすべて提供する
- エラーケースも適切に処理される

#### ✅ テスト通過
- 単体テストがすべて pass
- 統合テストで他機能との連携確認
- 手動テストで実際の使用シナリオを検証

#### ✅ 品質確認
- コードレビュー完了（可能であれば）
- 関連ドキュメントの更新完了
- [system_design.md](mdc:docs/system_design.md) との整合性確認

#### ✅ 動作検証
- 実際の使用シナリオでテスト実行
- パフォーマンス目標値を満たしている
- ユーザビリティに問題がない

### 4. チェックマーク更新
完了条件をすべて満たした場合のみ：
- [ ] → [x] に変更
- 進捗率を更新
- 完了日時をコメントで記録

## 優先度管理

### 🔴 HIGH (最優先)
- システムの基幹機能
- 他タスクのブロッカーとなるもの
- ハッカソン要件の必須機能
- **即座に着手し、完了まで集中**

### 🟡 MEDIUM (中優先度)  
- 重要だが緊急性は中程度
- ユーザビリティ向上に関わるもの
- **HIGH タスク完了後に順次実施**

### 🟢 LOW (改善系)
- 最適化・改善系のタスク
- 追加機能・拡張機能
- **MVP完成後の余裕があるときに実施**

## 進捗報告

### 週次レビュー
毎週以下を確認・更新：
- 完了したタスク数と進捗率
- 今週のフォーカスタスク
- 来週の計画
- ブロッカーや課題の特定

### デイリー確認
毎日以下を実施：
- 今日完了予定のタスク確認
- 進行中タスクの状況把握
- 完了条件の再確認

## 品質基準

### コード品質
- 可読性を重視した実装
- 適切なコメント・ドキュメント
- エラーハンドリングの実装
- パフォーマンスの考慮

### テスト品質  
- テストカバレッジ 80% 以上
- エッジケースのテスト
- 実際の使用シナリオでの検証
- 自動化可能なテストは自動化

### ドキュメント品質
- 実装内容と設計書の整合性
- API仕様の正確性
- ユーザーガイドの分かりやすさ
- 技術的な意思決定の記録

## リスク管理

### 技術的リスク
- 新しい技術の検証を早期実施
- 代替案を事前に準備
- 困ったときは早めに相談・調査

### スケジュールリスク
- バッファ時間を確保
- 依存関係を明確化
- ブロッカーは即座に解決

### 品質リスク
- 完了条件を妥協しない
- テストを軽視しない
- ユーザビリティを重視する
