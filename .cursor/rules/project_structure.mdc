---
description:
globs:
alwaysApply: false
---
# プロジェクト構造ルール

## プロジェクト構成

### ディレクトリ構造
```
yutorikyoshitu/
├── docs/                    # 設計書・仕様書
│   ├── REQUIREMENT.md       # 要件定義書
│   ├── system_design.md     # システム設計書  
│   ├── development_roadmap.md # 開発ロードマップ
│   ├── tasks.md            # 実装タスクリスト
│   └── hackason_rule.md    # ハッカソンルール
├── frontend/               # Flutter Web アプリ
│   ├── lib/
│   │   ├── models/         # データモデル
│   │   ├── services/       # API通信・外部サービス
│   │   ├── widgets/        # UIコンポーネント
│   │   ├── screens/        # 画面
│   │   └── utils/          # ユーティリティ
│   ├── web/
│   └── test/
├── backend/                # FastAPI バックエンド
│   ├── app/
│   │   ├── api/           # API エンドポイント
│   │   ├── models/        # データモデル
│   │   ├── services/      # ビジネスロジック
│   │   └── utils/         # ユーティリティ
│   ├── tests/
│   └── requirements.txt
├── infrastructure/         # インフラ設定
│   ├── terraform/         # インフラ as Code
│   └── docker/           # Docker 設定
└── .cursor/rules/         # Cursor ルール
```

## ファイル命名規則

### ドキュメント
- 設計書: `snake_case.md` 
- 仕様書: `大文字_CASE.md` (REQUIREMENT.md等)
- 日時を含む場合: `YYYY-MM-DD_title.md`

### コード
- **Flutter (Dart)**: `snake_case.dart`
- **Python**: `snake_case.py`
- **設定ファイル**: `kebab-case.yml`, `kebab-case.json`

### アセット
- **画像**: `kebab-case.png`, `kebab-case.svg`
- **フォント**: `kebab-case.ttf`
- **アイコン**: `category_name.svg`

## ドキュメント管理

### 中核ドキュメント
プロジェクトの方向性を決める重要ファイル：
- [REQUIREMENT.md](mdc:docs/REQUIREMENT.md) - 要件定義の唯一の正解
- [system_design.md](mdc:docs/system_design.md) - 技術設計の基準
- [tasks.md](mdc:docs/tasks.md) - 実装の進捗管理

### 更新ルール
- 機能変更時は該当ドキュメントを同時更新
- 設計変更は system_design.md に反映
- 新要件は REQUIREMENT.md に追加後、tasks.md に落とし込み

### バージョン管理
- 重要な変更はコミットメッセージに `[DOCS]` プレフィックス
- 設計変更は issue で議論・記録
- 決定事項は ADR (Architecture Decision Record) として記録

## ブランチ戦略

### ブランチ名
- **機能開発**: `feature/task-name`
- **バグ修正**: `fix/bug-description`  
- **ドキュメント**: `docs/update-description`
- **インフラ**: `infra/infrastructure-change`

### 例
```
feature/speech-to-text-integration
fix/html-editor-performance
docs/api-specification-update
infra/cloud-run-deployment
```

## コード品質

### Flutter
- 状態管理: Provider パターンを基本使用
- アーキテクチャ: MVVM パターン
- テスト: Widget テスト + 単体テスト

### Python (FastAPI)
- アーキテクチャ: レイヤードアーキテクチャ
- 型ヒント: 必須（全関数にタイプアノテーション）
- テスト: pytest + テストカバレッジ 80% 以上

### 共通
- リント: 各言語の標準フォーマッタを使用
- コメント: 日本語で記述（技術用語は英語併記）
- エラーハンドリング: 適切な例外処理とログ出力

## 依存関係管理

### パッケージ更新
- 月1回の定期更新
- セキュリティアップデートは即座対応
- 破壊的変更は慎重に検証

### バージョン固定
- 本番環境は必ずバージョン固定
- 開発環境は最新安定版を使用
- 依存関係の競合は早期発見・解決

## セキュリティ

### 機密情報
- API キーは環境変数で管理
- 設定ファイルにハードコード禁止
- Git コミット前にシークレット スキャン

### アクセス制御
- 最小権限の原則
- IAM ロールの適切な設定
- 定期的な権限見直し

## 環境管理

### 環境分離
- **開発 (dev)**: 開発者のローカル環境
- **ステージング (staging)**: 本番同等の検証環境  
- **本番 (prod)**: 実際のサービス提供環境

### 設定管理
- 環境ごとの設定ファイル分離
- 環境変数での設定上書き
- 設定値の バリデーション実装
