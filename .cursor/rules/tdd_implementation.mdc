---
description: 
globs: 
alwaysApply: true
---
# TDD実装フロールール

## 🎯 基本方針

このプロジェクトでは**テスト駆動開発（TDD）**と**要件定義**を同時進行で行い、高品質な学級通信AIシステムを構築します。

### 核心原則
- **要件定義 = テスト定義**: 機能要件を書く時は必ずテストケースも同時定義
- **TDDサイクル厳守**: Red → Green → Refactor を確実に実行
- **小さなタスク分割**: 1タスク = 1-2時間で完了可能な粒度
- **完了条件明確化**: 各タスクの成功基準を事前に定義

## 📋 タスク定義フロー

### 1. 機能要件 + テスト設計（同時実行）

新機能を実装する際は、以下を**必ず同時**に行う：

#### 要件定義
```markdown
## 機能: 音声入力からHTML生成

### 目的
教師が音声で話した内容を学級通信HTMLに変換する

### 入力
- 音声ファイル（wav/mp3, 最大5MB）
- カスタム指示（任意）
- 季節テーマ（spring/summer/autumn/winter）

### 出力  
- HTML形式の学級通信ドラフト
- Quill.js Delta JSON
- 生成メタデータ（信頼度、処理時間）

### 制約
- 処理時間: 30秒以内
- 対応言語: 日本語のみ
- 許可HTMLタグ: h1,h2,h3,p,ul,ol,li,strong,em,br
```

#### テスト設計（同時定義）
```dart
// test/services/voice_to_html_service_test.dart

group('音声入力からHTML生成', () {
  late VoiceToHtmlService service;
  
  setUp(() {
    service = VoiceToHtmlService();
  });

  test('正常な音声ファイルからHTMLが生成される', () async {
    // Given: 正常な音声ファイル
    final audioFile = File('test/fixtures/sample_voice.wav');
    final request = VoiceToHtmlRequest(
      audioFile: audioFile,
      seasonTheme: 'spring',
    );
    
    // When: HTML生成を実行
    final result = await service.generateHtml(request);
    
    // Then: 期待される結果
    expect(result.isSuccess, true);
    expect(result.htmlContent, contains('<h1>'));
    expect(result.deltaJson, isNotEmpty);
    expect(result.processingTimeMs, lessThan(30000));
    expect(result.confidence, greaterThan(0.7));
  });

  test('大容量ファイルはエラーになる', () async {
    // Given: 5MB超過のファイル
    final largeFile = File('test/fixtures/large_audio.wav');
    
    // When: HTML生成を実行
    final result = await service.generateHtml(
      VoiceToHtmlRequest(audioFile: largeFile)
    );
    
    // Then: エラーが発生
    expect(result.isFailure, true);
    expect(result.error, contains('ファイルサイズが上限を超えています'));
  });
});
```

### 2. タスク分解と優先順位

#### タスク粒度の原則
- **1タスク = 1-2時間**で完了
- **1タスク = 1つの明確な価値**を提供
- **依存関係**を明確に特定
- **テストケース数 ≤ 10個**程度

#### 優先度付け
```markdown
### 🔴 CRITICAL（即座に実装）
- [ ] 音声文字起こしAPI連携
  - 完了条件: Gemini APIでの音声→テキスト変換成功
  - テスト: 正常ケース3つ + エラーケース2つ
  - 所要時間: 2時間

### 🟡 HIGH（今週中）  
- [ ] HTML生成ロジック実装
  - 完了条件: テキスト→HTML変換、制約準拠
  - テスト: 正常ケース5つ + エラーケース3つ
  - 所要時間: 3時間

### 🟢 MEDIUM（来週）
- [ ] 季節テーマ適用機能
  - 完了条件: 4季節のカラーパレット適用
  - テスト: 各季節1ケースずつ
  - 所要時間: 1時間
```

## 🔴🟢🔵 TDDサイクル実行

### Red Phase（失敗するテストを書く）

```bash
# 1. テスト作成
cat > test/services/voice_service_test.dart << 'EOF'
test('音声ファイルを文字起こしできる', () async {
  final service = VoiceService();
  final result = await service.transcribe(audioFile);
  expect(result.text, equals('予想されるテキスト'));
});
EOF

# 2. テスト実行（失敗を確認）
flutter test test/services/voice_service_test.dart
# Expected: 'VoiceService' class not found ← これでOK
```

### Green Phase（最小限の実装）

```dart
// lib/services/voice_service.dart
class VoiceService {
  Future<TranscriptionResult> transcribe(File audioFile) async {
    // 最小限の実装（ハードコード OK）
    return TranscriptionResult(text: '予想されるテキスト');
  }
}

// テスト再実行
flutter test test/services/voice_service_test.dart
// ✅ 1 passing
```

### Blue Phase（リファクタリング）

```dart
// lib/services/voice_service.dart
class VoiceService {
  final GeminiApiClient _apiClient;
  
  VoiceService(this._apiClient);
  
  Future<TranscriptionResult> transcribe(File audioFile) async {
    // 実際のAPI連携に改善
    final bytes = await audioFile.readAsBytes();
    final response = await _apiClient.transcribeAudio(bytes);
    
    return TranscriptionResult(
      text: response.text,
      confidence: response.confidence,
    );
  }
}
```

## 📊 完了条件チェックリスト

### 各タスク完了時の必須確認項目

#### ✅ 機能要件
- [ ] 要件定義の全項目を満たしている
- [ ] 入力・出力仕様に100%準拠
- [ ] エラーケースも適切に処理
- [ ] パフォーマンス目標値をクリア

#### ✅ テスト品質
- [ ] 全テストケースが pass（100%）
- [ ] カバレッジ目標達成（85%以上）
- [ ] エッジケース・異常系のテスト実装
- [ ] 手動テストでも動作確認

#### ✅ コード品質
- [ ] `flutter analyze` エラー 0件
- [ ] `dart format` 適用済み
- [ ] コードレビュー完了（可能であれば）
- [ ] 関連ドキュメント更新

#### ✅ 統合確認
- [ ] 他機能との連携テスト通過
- [ ] UI/UXに問題なし
- [ ] [01_REQUIREMENT_overview.md](mdc:docs/01_REQUIREMENT_overview.md) との整合性確認
- [ ] パフォーマンス劣化なし

## 🛠️ 実装時のベストプラクティス

### テストファイル構造
```
test/
├── unit/                    # 単体テスト
│   ├── services/
│   ├── models/
│   └── utils/
├── widget/                  # ウィジェットテスト
│   ├── screens/
│   └── components/
├── integration/             # 統合テスト
│   ├── api/
│   └── e2e/
└── fixtures/                # テストデータ
    ├── audio/
    ├── json/
    └── html/
```

### テスト命名規則
```dart
group('機能名（日本語）', () {
  test('正常系: 期待される動作の説明', () async {});
  test('異常系: エラーケースの説明', () async {});
  test('境界値: 境界条件の説明', () async {});
});
```

### モック・スタブ活用
```dart
// API依存をモック化
class MockGeminiApiClient extends Mock implements GeminiApiClient {}

setUp(() {
  mockClient = MockGeminiApiClient();
  when(mockClient.transcribeAudio(any))
      .thenAnswer((_) async => TranscriptionResponse(text: 'テスト結果'));
});
```

## 📝 ドキュメント連携

### 要件変更時の更新フロー
1. **要件書更新**: [01_REQUIREMENT_overview.md](mdc:docs/01_REQUIREMENT_overview.md)
2. **テスト更新**: 新要件に合わせてテストケース追加
3. **実装更新**: TDDサイクルで実装修正
4. **設計書更新**: 影響する設計書の同期更新

### 進捗管理
- 毎日: [tasks.md](mdc:docs/tasks.md) の進捗更新
- 完了時: チェックリスト全項目の確認記録
- 週次: テストカバレッジ・品質メトリクス確認

## ⚡ 効率化Tips

### 開発環境セットアップ
```bash
# テスト実行ショートカット
alias ft='flutter test'
alias fa='flutter analyze'  
alias ff='dart format .'

# 監視モードでテスト実行
flutter test --watch
```

### VS Code設定
```json
{
  "dart.runPubGetOnPubspecChanges": true,
  "dart.openDevTools": "flutter",
  "testing.automaticallyOpenPeekView": "never",
  "testing.openTesting": "neverOpen"
}
```

### CI/CD連携
```yaml
# .github/workflows/test.yml
name: Test
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
      - run: flutter test --coverage
      - run: flutter analyze
```

このルールに従うことで、高品質な学級通信AIシステムを効率的に構築できます。テスト駆動により、安心してリファクタリングでき、要件変更にも迅速に対応可能になります。
