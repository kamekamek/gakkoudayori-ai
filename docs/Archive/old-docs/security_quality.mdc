---
description:
globs:
alwaysApply: false
---
# セキュリティ・品質管理規約

## 🔒 セキュリティ必須要件

### Firebase Authentication
- JWT トークン検証必須
- Google Sign-In統合
- 適切なトークンリフレッシュ
- セッション管理・ログアウト処理

### 環境変数管理
- API キー・機密情報の環境変数化
- [backend/env.example](mdc:backend/env.example) のテンプレート使用
- 本番環境での適切な環境変数設定
- GOOGLE_APPLICATION_CREDENTIALS設定

### Google Cloud セキュリティ
- 最小権限の原則（IAM設定）
- Vertex AI・Speech-to-Text APIキー保護
- Cloud Run・Firestore アクセス制御
- CORS設定の適切な実装

## 🛡️ API セキュリティ

### 認証・認可
```python
# 必須: JWT認証デコレータ
@router.post("/documents/")
async def create_document(
    request: DocumentRequest,
    user_id: str = Depends(get_current_user_id)
):
    pass
```

### 入力値検証
```python
# 必須: Pydantic バリデーション
class DocumentRequest(BaseModel):
    title: str = Field(..., min_length=1, max_length=100)
    content: str = Field(..., max_length=10000)
    
    @validator('title')
    def validate_title(cls, v):
        if not v.strip():
            raise ValueError('タイトルは必須です')
        return v.strip()
```

### レスポンス設計
- 適切なHTTPステータスコード使用
- エラーレスポンスの標準化
- 機密情報のレスポンス除外
- レート制限の実装

## 🧪 品質保証

### テスト戦略
- **単体テスト**: 各関数・メソッドの独立テスト
- **統合テスト**: API エンドポイント・データベース操作
- **E2Eテスト**: ユーザーストーリーベースの動作確認
- **セキュリティテスト**: 認証・認可・入力値検証

### パフォーマンス目標
- **エディタ応答**: <100ms（リアルタイム編集）
- **PDF生成**: <3秒（WeasyPrint変換）
- **音声認識**: >95%精度（ノイズ抑制・ユーザー辞書）
- **Gemini API**: <500ms応答（リライト・見出し生成）

## 🚨 エラーハンドリング

### Flutter/Dart エラー処理
```dart
// 必須: Try-catch + ログ + ユーザー通知
Future<void> uploadAudioFile(File audioFile) async {
  try {
    await _speechService.transcribe(audioFile);
  } on NetworkException catch (e) {
    _logger.error('音声アップロード失敗', e);
    _showUserError('インターネット接続を確認してください');
  } catch (e) {
    _logger.error('予期しないエラー', e);
    _showUserError('エラーが発生しました');
  }
}
```

### Python/FastAPI エラー処理
```python
# 必須: 構造化例外処理
try:
    result = await service.process()
    return result
except ValidationError as e:
    logger.error(f"バリデーションエラー: {e}")
    raise HTTPException(
        status_code=status.HTTP_400_BAD_REQUEST,
        detail=str(e)
    )
except Exception as e:
    logger.error(f"予期しないエラー: {e}")
    raise HTTPException(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        detail="内部サーバーエラー"
    )
```

## 📊 監視・ログ

### ログ戦略
- 構造化ログ（JSON形式）
- 適切なログレベル（DEBUG・INFO・ERROR）
- 機密情報のログ除外
- パフォーマンス測定ログ

### 監視項目
- API レスポンス時間
- エラー発生率
- 認証成功・失敗率
- データベース接続状態

## 🔍 コードレビュー項目

### セキュリティチェック
- [ ] API キー・機密情報のハードコード禁止
- [ ] 適切な認証・認可実装
- [ ] 入力値検証・サニタイズ実装
- [ ] HTTPS・CORS設定確認
- [ ] SQLインジェクション対策

### 品質チェック
- [ ] エラーハンドリング実装
- [ ] ログ出力の適切性
- [ ] パフォーマンス最適化
- [ ] テストカバレッジ80%以上
- [ ] ドキュメント更新

### Flutter/Dart 固有
- [ ] mounted チェック（非同期処理）
- [ ] dispose処理（リソース解放）
- [ ] Provider状態管理の適切性
- [ ] UI/UX・アクセシビリティ対応

### Python/FastAPI 固有
- [ ] 型ヒント完全実装
- [ ] Pydantic モデル使用
- [ ] 環境変数での設定管理
- [ ] 依存性注入の適切性

## 🚀 本番環境対応

### デプロイ前チェック
- [ ] 全テスト通過
- [ ] セキュリティスキャン実行
- [ ] パフォーマンステスト
- [ ] 環境変数設定確認
- [ ] ログ・監視設定

### Cloud Run デプロイ
- CPU・メモリ適切設定
- 環境変数の適切な管理
- ヘルスチェックエンドポイント
- タイムアウト設定

参照: [CODING_GUIDELINES.md](mdc:CODING_GUIDELINES.md) の詳細なセキュリティ実装例
