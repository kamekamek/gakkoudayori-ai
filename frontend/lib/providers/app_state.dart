import 'package:flutter/material.dart';
import '../models/document.dart';

class AppState extends ChangeNotifier {
  ThemeMode _themeMode = ThemeMode.light;
  int _currentSeasonIndex = 0; // 0: spring, 1: summer, 2: autumn, 3: winter
  bool _isRecording = false;
  String _currentTranscription = '';
  List<Document> _recentDocuments = [];
  bool _isLoadingDocuments = false;
  String _editorText = '';
  
  // Getters
  ThemeMode get themeMode => _themeMode;
  int get currentSeasonIndex => _currentSeasonIndex;
  bool get isRecording => _isRecording;
  String get currentTranscription => _currentTranscription;
  List<Document> get recentDocuments => _recentDocuments;
  bool get isLoadingDocuments => _isLoadingDocuments;
  String get editorText => _editorText;
  
  // Theme management
  void toggleTheme() {
    _themeMode = _themeMode == ThemeMode.light 
        ? ThemeMode.dark 
        : ThemeMode.light;
    notifyListeners();
  }
  
  void setThemeMode(ThemeMode mode) {
    _themeMode = mode;
    notifyListeners();
  }
  
  // Season management
  void setSeason(int seasonIndex) {
    if (seasonIndex < 0 || seasonIndex > 3) {
      throw ArgumentError('Season index must be between 0 and 3');
    }
    _currentSeasonIndex = seasonIndex;
    notifyListeners();
  }
  
  void nextSeason() {
    _currentSeasonIndex = (_currentSeasonIndex + 1) % 4;
    notifyListeners();
  }
  
  String get currentSeasonName {
    switch (_currentSeasonIndex) {
      case 0: return 'Êò•';
      case 1: return 'Â§è';
      case 2: return 'Áßã';
      case 3: return 'ÂÜ¨';
      default: return 'Êò•';
    }
  }
  
    // Recording management
  Future<bool> ensureMicPermission() async {
    // TODO: ÂÆüÈöõ„ÅÆ„Éû„Ç§„ÇØÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØÂÆüË£Ö
    // ÁèæÂú®„ÅØ„É¢„ÉÉ„ÇØÂÆüË£Ö
    await Future.delayed(const Duration(milliseconds: 100));
    return true; // ÂÆüÈöõ„ÅØpermission_handler„Éë„ÉÉ„Ç±„Éº„Ç∏„Å™„Å©„Çí‰ΩøÁî®
  }

  void startRecording() {
    _isRecording = true;
    notifyListeners();
  }

  void stopRecording() {
    _isRecording = false;
    notifyListeners();
  }
  
  void updateTranscription(String text) {
    _currentTranscription = text;
    notifyListeners();
  }
  
  void clearTranscription() {
    _currentTranscription = '';
    notifyListeners();
  }
  
  void setEditorText(String text) {
    _editorText = text;
    notifyListeners();
  }
  
  void clearEditorText() {
    _editorText = '';
    notifyListeners();
  }
  
  // Document management
  void addRecentDocument(Document document) {
    _recentDocuments.removeWhere((d) => d.id == document.id);
    _recentDocuments.insert(0, document);
    if (_recentDocuments.length > 10) {
      _recentDocuments = _recentDocuments.take(10).toList();
    }
    notifyListeners();
  }
  
  void removeRecentDocument(String documentId) {
    _recentDocuments.removeWhere((d) => d.id == documentId);
    notifyListeners();
  }

  Future<void> loadRecentDocuments() async {
    _isLoadingDocuments = true;
    notifyListeners();

    try {
      // TODO: ÂÆüÈöõ„ÅØFirestore„Åã„ÇâÂèñÂæó
      // ÁèæÂú®„ÅØ„Çµ„É≥„Éó„É´„Éá„Éº„Çø„Çí‰ΩøÁî®
      await Future.delayed(const Duration(milliseconds: 500));
      
      final now = DateTime.now();
      _recentDocuments = [
        Document(
          id: '1',
          title: 'ÈÅãÂãï‰ºö„ÅÆÊåØ„ÇäËøî„Çä',
          createdAt: now.subtract(const Duration(days: 2)),
          updatedAt: now.subtract(const Duration(days: 2)),
          thumbnail: 'üèÉ‚Äç‚ôÇÔ∏è',
          status: DocumentStatus.published,
          content: '‰ªäÊó•„ÅØÈÅãÂãï‰ºö„Åß„Åó„Åü...',
          views: 45,
        ),
        Document(
          id: '2',
          title: 'Ê¢ÖÈõ®„ÅÆÈÅé„Åî„ÅóÊñπ',
          createdAt: now.subtract(const Duration(days: 4)),
          updatedAt: now.subtract(const Duration(days: 4)),
          thumbnail: '‚òî',
          status: DocumentStatus.draft,
          content: 'Ê¢ÖÈõ®„ÅÆÂ≠£ÁØÄ„Åå„ÇÑ„Å£„Å¶„Åç„Åæ„Åó„Åü...',
          views: 0,
        ),
        Document(
          id: '3',
          title: '5Êúà„ÅÆÂ≠¶Á¥ö„Å†„Çà„Çä',
          createdAt: now.subtract(const Duration(days: 7)),
          updatedAt: now.subtract(const Duration(days: 7)),
          thumbnail: 'üå∏',
          status: DocumentStatus.published,
          content: 'Êñ∞Â≠¶Êúü„ÅåÂßã„Åæ„Å£„Å¶1„É∂Êúà...',
          views: 78,
        ),
      ];
    } catch (e) {
      // „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
      _recentDocuments = [];
    } finally {
      _isLoadingDocuments = false;
      notifyListeners();
    }
  }

  void updateDocument(Document document) {
    final index = _recentDocuments.indexWhere((d) => d.id == document.id);
    if (index != -1) {
      _recentDocuments[index] = document;
      notifyListeners();
    }
  }
}