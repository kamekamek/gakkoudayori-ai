import 'package:flutter/material.dart';
import '../../../../core/models/models.dart';

/// „Çπ„Çø„Ç§„É´ÈÅ∏Êäû„Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà
/// 
/// Èü≥Â£∞ÂÖ•ÂäõÁõ¥Âæå„Å´Ë°®Á§∫„Åï„Çå„ÇãÂæìÊù•„ÅÆ„Çπ„Çø„Ç§„É´ÈÅ∏ÊäûUI
/// ADK„Éû„É´„ÉÅ„Ç®„Éº„Ç∏„Çß„É≥„Éà„Ç∑„Çπ„ÉÜ„É†„Å®„ÅÆÁµ±ÂêàÂØæÂøú
class StyleSelectionWidget extends StatefulWidget {
  final NewsletterStyle? selectedStyle;
  final Function(NewsletterStyle)? onStyleSelected;
  final Function()? onCreateNewsletter;
  final bool isProcessing;
  final String transcribedText;

  const StyleSelectionWidget({
    Key? key,
    this.selectedStyle,
    this.onStyleSelected,
    this.onCreateNewsletter,
    this.isProcessing = false,
    this.transcribedText = '',
  }) : super(key: key);

  @override
  State<StyleSelectionWidget> createState() => _StyleSelectionWidgetState();
}

class _StyleSelectionWidgetState extends State<StyleSelectionWidget>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeInOut,
    ));
    
    _animationController.forward();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return FadeTransition(
      opacity: _fadeAnimation,
      child: Card(
        elevation: 4,
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildHeader(),
              const SizedBox(height: 20),
              if (widget.transcribedText.isNotEmpty) ...[
                _buildTranscribedTextPreview(),
                const SizedBox(height: 20),
              ],
              _buildStyleOptions(),
              const SizedBox(height: 24),
              _buildCreateButton(),
              const SizedBox(height: 12),
              _buildADKInfo(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Row(
      children: [
        Icon(
          Icons.palette,
          color: Theme.of(context).primaryColor,
          size: 28,
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'üé® „Çπ„Çø„Ç§„É´ÈÅ∏Êäû',
                style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
              ),
              Text(
                'Â≠¶Á¥öÈÄö‰ø°„ÅÆ„Çπ„Çø„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
                style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                  color: Colors.grey.shade600,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildTranscribedTextPreview() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.grey.shade50,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey.shade200),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                Icons.transcribe,
                size: 16,
                color: Colors.grey.shade600,
              ),
              const SizedBox(width: 8),
              Text(
                'Èü≥Â£∞Ë™çË≠òÁµêÊûú',
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                  fontWeight: FontWeight.w600,
                  color: Colors.grey.shade700,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Text(
            widget.transcribedText.length > 200
                ? '${widget.transcribedText.substring(0, 200)}...'
                : widget.transcribedText,
            style: Theme.of(context).textTheme.bodyMedium,
          ),
          if (widget.transcribedText.length > 200)
            Text(
              'Ôºà${widget.transcribedText.length}ÊñáÂ≠óÔºâ',
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                color: Colors.grey.shade600,
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildStyleOptions() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'üìã Â≠¶Á¥öÈÄö‰ø°„ÅÆ„Çπ„Çø„Ç§„É´„ÇíÈÅ∏Êäû:',
          style: Theme.of(context).textTheme.bodyLarge?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 16),
        Row(
          children: [
            Expanded(
              child: _buildStyleOption(
                style: NewsletterStyle.classic,
                title: '„ÇØ„É©„Ç∑„ÉÉ„ÇØ',
                description: '‰ºùÁµ±ÁöÑ„ÅßË™≠„Åø„ÇÑ„Åô„ÅÑ\n‰ø°È†ºÊÄßÈáçË¶ñ',
                icon: Icons.article,
                color: const Color(0xFF1976D2),
                promptInfo: 'CLASSIC_TENSAKU.md\nCLASSIC_LAYOUT.md',
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: _buildStyleOption(
                style: NewsletterStyle.modern,
                title: '„É¢„ÉÄ„É≥',
                description: '„Ç§„É≥„Éï„Ç©„Ç∞„É©„Éï„Ç£„ÉÉ„ÇØÁöÑ\nË¶ñË¶öÁöÑÁæé„Åó„ÅïÈáçË¶ñ',
                icon: Icons.auto_awesome,
                color: const Color(0xFFFF9800),
                promptInfo: 'MODERN_TENSAKU.md\nMODERN_LAYOUT.md',
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildStyleOption({
    required NewsletterStyle style,
    required String title,
    required String description,
    required IconData icon,
    required Color color,
    required String promptInfo,
  }) {
    final isSelected = widget.selectedStyle == style;
    
    return GestureDetector(
      onTap: () => widget.onStyleSelected?.call(style),
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 200),
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: isSelected ? color.withOpacity(0.1) : Colors.white,
          border: Border.all(
            color: isSelected ? color : Colors.grey.shade300,
            width: isSelected ? 2 : 1,
          ),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          children: [
            Container(
              width: 60,
              height: 60,
              decoration: BoxDecoration(
                color: isSelected ? color : Colors.grey.shade100,
                shape: BoxShape.circle,
              ),
              child: Icon(
                icon,
                size: 28,
                color: isSelected ? Colors.white : Colors.grey.shade600,
              ),
            ),
            const SizedBox(height: 12),
            Text(
              title,
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
                color: isSelected ? color : Colors.grey.shade800,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              description,
              textAlign: TextAlign.center,
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                height: 1.4,
                color: Colors.grey.shade600,
              ),
            ),
            const SizedBox(height: 12),
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              decoration: BoxDecoration(
                color: Colors.grey.shade100,
                borderRadius: BorderRadius.circular(4),
              ),
              child: Text(
                promptInfo,
                style: const TextStyle(
                  fontSize: 9,
                  fontFamily: 'monospace',
                  color: Colors.grey,
                ),
                textAlign: TextAlign.center,
              ),
            ),
            if (isSelected) ...[
              const SizedBox(height: 8),
              Icon(
                Icons.check_circle,
                color: color,
                size: 20,
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildCreateButton() {
    final canCreate = widget.selectedStyle != null && !widget.isProcessing;
    
    return SizedBox(
      width: double.infinity,
      height: 50,
      child: ElevatedButton(
        onPressed: canCreate ? widget.onCreateNewsletter : null,
        style: ElevatedButton.styleFrom(
          backgroundColor: widget.selectedStyle != null
              ? (widget.selectedStyle == NewsletterStyle.classic
                  ? const Color(0xFF1976D2)
                  : const Color(0xFFFF9800))
              : null,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
        ),
        child: widget.isProcessing
            ? Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                    ),
                  ),
                  const SizedBox(width: 12),
                  const Text('ADK„Ç®„Éº„Ç∏„Çß„É≥„ÉàÂá¶ÁêÜ‰∏≠...'),
                ],
              )
            : Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Icon(Icons.psychology, size: 20),
                  const SizedBox(width: 8),
                  const Text(
                    'Â≠¶Á¥öÈÄö‰ø°„Çí‰ΩúÊàê„Åô„Çã',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
      ),
    );
  }

  Widget _buildADKInfo() {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.blue.shade50,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.blue.shade200),
      ),
      child: Row(
        children: [
          Icon(
            Icons.info_outline,
            size: 16,
            color: Colors.blue.shade700,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              'ADK„Éû„É´„ÉÅ„Ç®„Éº„Ç∏„Çß„É≥„Éà„Ç∑„Çπ„ÉÜ„É†„Åå7„Å§„ÅÆÂ∞ÇÈñÄ„Ç®„Éº„Ç∏„Çß„É≥„Éà„ÅßÈ´òÂìÅË≥™„Å™Â≠¶Á¥öÈÄö‰ø°„ÇíÁîüÊàê„Åó„Åæ„Åô',
              style: TextStyle(
                fontSize: 12,
                color: Colors.blue.shade700,
              ),
            ),
          ),
        ],
      ),
    );
  }
}

/// „Çπ„Çø„Ç§„É´ÊØîËºÉ„ÉÄ„Ç§„Ç¢„É≠„Ç∞
class StyleComparisonDialog extends StatelessWidget {
  const StyleComparisonDialog({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('üìã „Çπ„Çø„Ç§„É´ÊØîËºÉ'),
      content: SizedBox(
        width: 400,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            _buildComparisonTable(),
            const SizedBox(height: 16),
            _buildPromptInfo(),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('Èñâ„Åò„Çã'),
        ),
      ],
    );
  }

  Widget _buildComparisonTable() {
    return Table(
      border: TableBorder.all(color: Colors.grey.shade300),
      children: [
        const TableRow(
          decoration: BoxDecoration(color: Colors.grey),
          children: [
            Padding(
              padding: EdgeInsets.all(8.0),
              child: Text('È†ÖÁõÆ', style: TextStyle(fontWeight: FontWeight.bold)),
            ),
            Padding(
              padding: EdgeInsets.all(8.0),
              child: Text('„ÇØ„É©„Ç∑„ÉÉ„ÇØ', style: TextStyle(fontWeight: FontWeight.bold)),
            ),
            Padding(
              padding: EdgeInsets.all(8.0),
              child: Text('„É¢„ÉÄ„É≥', style: TextStyle(fontWeight: FontWeight.bold)),
            ),
          ],
        ),
        _buildTableRow('„Éá„Ç∂„Ç§„É≥', '‰ºùÁµ±ÁöÑ„Éª„Ç∑„É≥„Éó„É´', '„Ç§„É≥„Éï„Ç©„Ç∞„É©„Éï„Ç£„ÉÉ„ÇØÁöÑ'),
        _buildTableRow('„É¨„Ç§„Ç¢„Ç¶„Éà', '„Ç∑„É≥„Ç∞„É´„Ç´„É©„É†', '„Éì„Ç∏„É•„Ç¢„É´ÈáçË¶ñ'),
        _buildTableRow('„Ç´„É©„Éº', 'ËêΩ„Å°ÁùÄ„ÅÑ„Åü„Éà„Éº„É≥', 'ÈÆÆ„ÇÑ„Åã„Å™„Éà„Éº„É≥'),
        _buildTableRow('ÈÅ©Áî®Â†¥Èù¢', 'ÂÖ¨ÂºèÊñáÊõ∏„Éª‰øùË≠∑ËÄÖÈÖçÂ∏É', '„Ç§„Éô„É≥„Éà„ÉªÁâπÂà•Âè∑'),
      ],
    );
  }

  TableRow _buildTableRow(String item, String classic, String modern) {
    return TableRow(
      children: [
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: Text(item, style: const TextStyle(fontWeight: FontWeight.w600)),
        ),
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: Text(classic),
        ),
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: Text(modern),
        ),
      ],
    );
  }

  Widget _buildPromptInfo() {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.grey.shade50,
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'ü§ñ ‰ΩøÁî®„Åï„Çå„ÇãAI„Éó„É≠„É≥„Éó„Éà',
            style: TextStyle(fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 8),
          const Text('„ÇØ„É©„Ç∑„ÉÉ„ÇØ: CLASSIC_TENSAKU.md + CLASSIC_LAYOUT.md'),
          const Text('„É¢„ÉÄ„É≥: MODERN_TENSAKU.md + MODERN_LAYOUT.md'),
          const SizedBox(height: 8),
          Text(
            'ÂêÑ„Éó„É≠„É≥„Éó„Éà„ÅØÊïôËÇ≤ÁèæÂ†¥„ÅÆÊÖ£Áøí„Å´ÁâπÂåñ„Åó„Å¶ÊúÄÈÅ©Âåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ',
            style: TextStyle(
              fontSize: 12,
              color: Colors.grey.shade600,
            ),
          ),
        ],
      ),
    );
  }
}