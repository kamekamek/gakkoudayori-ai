import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'dart:html' as html;
import '../../../editor/providers/preview_provider.dart';
import '../../providers/newsletter_provider.dart';
import '../../../ai_assistant/providers/adk_chat_provider.dart';
import 'preview_mode_toolbar.dart';
import '../../../../widgets/quill_editor_widget.dart';
import '../../../../widgets/notification_widget.dart';
import '../../../../widgets/unified_preview_widget.dart';
import '../../../../widgets/accurate_print_preview_widget.dart';
import '../../../../widgets/simple_html_editor_widget.dart';
import '../../../../widgets/rich_html_editor_widget.dart';
import '../../../../utils/html_processing_utils.dart';
import '../../../../core/models/chat_message.dart';

/// „Éó„É¨„Éì„É•„Éº„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„ÇπÔºàÂè≥ÂÅ¥„Éë„Éç„É´Ôºâ
class PreviewInterface extends StatefulWidget {
  const PreviewInterface({super.key});

  @override
  State<PreviewInterface> createState() => _PreviewInterfaceState();
}

class _PreviewInterfaceState extends State<PreviewInterface> {
  final List<NotificationData> _notifications = [];

  void _addNotification(String message, SystemMessageType type) {
    final notification = NotificationData(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      message: message,
      type: type,
    );

    setState(() {
      _notifications.add(notification);
    });

    // Ëá™ÂãïÂâäÈô§„Çø„Ç§„Éû„Éº
    Future.delayed(const Duration(seconds: 5), () {
      _removeNotification(notification.id);
    });
  }

  void _removeNotification(String id) {
    setState(() {
      _notifications.removeWhere((notification) => notification.id == id);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Consumer2<PreviewProvider, NewsletterProvider>(
      builder: (context, previewProvider, newsletterProvider, child) {
        return Column(
          children: [
            // „Éó„É¨„Éì„É•„Éº„É¢„Éº„ÉâÂàá„ÇäÊõø„Åà„ÉÑ„Éº„É´„Éê„Éº
            PreviewModeToolbar(
              currentMode: previewProvider.currentMode,
              onModeChanged: (mode) => previewProvider.switchMode(mode),
              onPdfGenerate: () => _generatePdf(context),
              onPrintPreview: () => _showPrintPreview(context),
              onRegenerate: () => _regenerateContent(context),
              canExecuteActions: previewProvider.htmlContent.isNotEmpty,
              onNotification: _addNotification,
            ),

            // ÈÄöÁü•„Ç®„É™„Ç¢
            if (_notifications.isNotEmpty)
              NotificationContainer(
                notifications: _notifications,
                onDismiss: _removeNotification,
              ),

            // „Éó„É¨„Éì„É•„Éº„Ç≥„É≥„ÉÜ„É≥„ÉÑ
            Expanded(
              child: Container(
                color: Theme.of(context).colorScheme.background,
                child: _buildPreviewContent(
                  context,
                  previewProvider,
                  newsletterProvider,
                ),
              ),
            ),
          ],
        );
      },
    );
  }

  Widget _buildPreviewContent(
    BuildContext context,
    PreviewProvider previewProvider,
    NewsletterProvider newsletterProvider,
  ) {
    // ÁîüÊàê‰∏≠„ÅÆÂ†¥Âêà
    if (previewProvider.isGeneratingPdf) {
      return _buildLoadingState(context, 'PDFÁîüÊàê‰∏≠...');
    }

    // „Ç≥„É≥„ÉÜ„É≥„ÉÑ„Åå„Å™„ÅÑÂ†¥Âêà
    if (previewProvider.htmlContent.isEmpty) {
      return _buildEmptyState(context);
    }

    // „Éó„É¨„Éì„É•„Éº„É¢„Éº„Éâ„Å´Âøú„Åò„Å¶Ë°®Á§∫
    switch (previewProvider.currentMode) {
      case PreviewMode.preview:
        return _buildUnifiedPreviewMode(context, previewProvider.htmlContent);

      case PreviewMode.edit:
        return _buildInlineEditMode(context, previewProvider);

      case PreviewMode.printView:
        return _buildAccuratePrintViewMode(context, previewProvider.htmlContent);
    }
  }

  Widget _buildEmptyState(BuildContext context) {
    return Container(
      color: const Color(0xFFFAFAFA),
      child: Center(
        child: Padding(
          padding: const EdgeInsets.all(32),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Container(
                padding: const EdgeInsets.all(24),
                decoration: BoxDecoration(
                  color: const Color(0xFF2c5aa0).withOpacity(0.1),
                  shape: BoxShape.circle,
                ),
                child: const Icon(
                  Icons.description,
                  size: 48,
                  color: Color(0xFF2c5aa0),
                ),
              ),
              const SizedBox(height: 24),
              const Text(
                'üìÑ „Éó„É¨„Éì„É•„Éº',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                  color: Color(0xFF2c5aa0),
                ),
              ),
              const SizedBox(height: 12),
              const Text(
                '„É™„Ç¢„É´„Çø„Ç§„É†„Éó„É¨„Éì„É•„Éº„Åå„Åì„Åì„Å´Ë°®Á§∫„Åï„Çå„Åæ„Åô',
                style: TextStyle(
                  fontSize: 14,
                  color: Color(0xFF616161),
                  height: 1.4,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 8),
              const Text(
                'AI„Å®„ÅÆÂØæË©±„ÇíÈñãÂßã„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
                style: TextStyle(
                  fontSize: 12,
                  color: Color(0xFF9E9E9E),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildLoadingState(BuildContext context, String statusMessage) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(32),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            SizedBox(
              width: 48,
              height: 48,
              child: CircularProgressIndicator(
                strokeWidth: 3,
                valueColor: AlwaysStoppedAnimation<Color>(
                  Theme.of(context).colorScheme.primary,
                ),
              ),
            ),
            const SizedBox(height: 24),
            Text(
              'AIÁîüÊàê‰∏≠...',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    color: Theme.of(context).colorScheme.primary,
                    fontWeight: FontWeight.bold,
                  ),
            ),
            const SizedBox(height: 8),
            Text(
              statusMessage,
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                    color: Theme.of(context).colorScheme.onSurfaceVariant,
                  ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildInlineEditMode(BuildContext context, PreviewProvider previewProvider) {
    return Container(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          // Á∑®ÈõÜ„É¢„Éº„Éâ„ÅÆ„Éò„ÉÉ„ÉÄ„Éº
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            decoration: BoxDecoration(
              color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(8),
                topRight: Radius.circular(8),
              ),
              border: Border.all(
                color: Theme.of(context).colorScheme.primary.withOpacity(0.3),
              ),
            ),
            child: Row(
              children: [
                Icon(
                  Icons.edit_outlined,
                  size: 18,
                  color: Theme.of(context).colorScheme.primary,
                ),
                const SizedBox(width: 8),
                Text(
                  '„É™„ÉÉ„ÉÅHTMLÁ∑®ÈõÜ„É¢„Éº„Éâ',
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                    color: Theme.of(context).colorScheme.primary,
                  ),
                ),
                const SizedBox(width: 8),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                  decoration: BoxDecoration(
                    color: Colors.green.shade100,
                    borderRadius: BorderRadius.circular(10),
                  ),
                  child: Text(
                    'NEW',
                    style: TextStyle(
                      fontSize: 9,
                      fontWeight: FontWeight.bold,
                      color: Colors.green.shade700,
                    ),
                  ),
                ),
                const Spacer(),
                TextButton.icon(
                  onPressed: () => _openQuillEditor(context),
                  icon: const Icon(Icons.open_in_new, size: 14),
                  label: const Text('Quill'),
                  style: TextButton.styleFrom(
                    foregroundColor: Theme.of(context).colorScheme.primary,
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    textStyle: const TextStyle(fontSize: 11),
                  ),
                ),
                const SizedBox(width: 8),
                TextButton.icon(
                  onPressed: () => _showLegacyEditor(context, previewProvider),
                  icon: const Icon(Icons.text_fields, size: 14),
                  label: const Text('Êóß'),
                  style: TextButton.styleFrom(
                    foregroundColor: Colors.grey.shade600,
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    textStyle: const TextStyle(fontSize: 11),
                  ),
                ),
              ],
            ),
          ),
          
          // „Ç§„É≥„É©„Ç§„É≥Á∑®ÈõÜ„Ç®„É™„Ç¢ÔºàÊñ∞„Åó„ÅÑRichHtmlEditor‰ΩøÁî®Ôºâ
          Expanded(
            child: RichHtmlEditorWidget(
              key: ValueKey('rich-editor-${previewProvider.hashCode}'),
              initialContent: HtmlProcessingUtils.sanitizeForRichEditor(previewProvider.htmlContent),
              onContentChanged: (editedHtml) {
                // Áõ∏‰∫íÊõ¥Êñ∞„É´„Éº„Éó„ÇíÈò≤„Åê„Åü„ÇÅ„ÄÅÂÜÖÂÆπ„ÅåÂÆüÈöõ„Å´Â§â„Çè„Å£„ÅüÂ†¥Âêà„ÅÆ„ÅøÂá¶ÁêÜ
                if (editedHtml == previewProvider.htmlContent) return;
                
                // HTMLÊßãÈÄ†„ÅÆÊ§úË®º„Å®Â§âÊõ¥Ê§úÂá∫
                final changes = HtmlProcessingUtils.detectHtmlChanges(
                  previewProvider.htmlContent, 
                  editedHtml
                );
                
                try {
                  // „Éá„Éê„Ç¶„É≥„ÇπÁöÑ„Å™Âá¶ÁêÜ„ÅßÈÄ£Á∂öÊõ¥Êñ∞„ÇíÈò≤„Åê
                  Future.delayed(const Duration(milliseconds: 100), () {
                    if (mounted && editedHtml != previewProvider.htmlContent) {
                      previewProvider.updateHtmlContent(editedHtml);
                      
                      if (changes['hasChanges']) {
                        final changeDetails = changes['details'] as String;
                        _addNotification('‚úÖ $changeDetails', SystemMessageType.success);
                        
                        // ÊßãÈÄ†ÁöÑÂ§âÊõ¥„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÁâπÂà•„Å™ÈÄöÁü•
                        if (changes['hasStructuralChanges']) {
                          final structuralChanges = changes['structuralChanges'] as List<String>;
                          _addNotification('üîÑ ${structuralChanges.join(', ')}', SystemMessageType.info);
                        }
                      }
                    }
                  });
                } catch (e) {
                  _addNotification('‚ùå Á∑®ÈõÜÂÜÖÂÆπ„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó: $e', SystemMessageType.error);
                }
              },
              height: 400, // ÈÅ©Âàá„Å™È´ò„Åï„Å´Â§âÊõ¥
              showToolbar: true,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildUnifiedPreviewMode(BuildContext context, String htmlContent) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Container(
        constraints: const BoxConstraints(maxWidth: 800),
        margin: const EdgeInsets.symmetric(horizontal: 16),
        child: UnifiedPreviewWidget(
          htmlContent: htmlContent,
          height: 600,
          onContentReady: () {
            if (mounted) {
              _addNotification('„Éó„É¨„Éì„É•„Éº„ÅÆÊ∫ñÂÇô„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü', SystemMessageType.success);
            }
          },
          onError: (error) {
            if (mounted) {
              _addNotification('„Éó„É¨„Éì„É•„Éº„Ç®„É©„Éº: $error', SystemMessageType.error);
            }
          },
        ),
      ),
    );
  }

  Widget _buildAccuratePrintViewMode(BuildContext context, String htmlContent) {
    return Container(
      color: Colors.grey[200],
      child: SingleChildScrollView(
        child: AccuratePrintPreviewWidget(
          htmlContent: htmlContent,
          scale: 0.8,
          showPageBorder: true,
          onContentReady: () {
            if (mounted) {
              _addNotification('Âç∞Âà∑„Éó„É¨„Éì„É•„Éº„ÅÆÊ∫ñÂÇô„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü', SystemMessageType.success);
            }
          },
          onError: (error) {
            if (mounted) {
              _addNotification('Âç∞Âà∑„Éó„É¨„Éì„É•„Éº„Ç®„É©„Éº: $error', SystemMessageType.error);
            }
          },
        ),
      ),
    );
  }

  void _generatePdf(BuildContext context) async {
    try {
      await context.read<PreviewProvider>().generatePdf();
      
      // „Çπ„Éä„ÉÉ„ÇØ„Éê„ÉºË°®Á§∫Ôºà‰∏äÈÉ®Ë°®Á§∫„Éª√ó„Éú„Çø„É≥‰ªò„ÅçÔºâ
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text('‚úÖ PDF„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü'),
          duration: const Duration(seconds: 4),
          behavior: SnackBarBehavior.floating,
          margin: const EdgeInsets.only(top: 50, left: 16, right: 16),
          action: SnackBarAction(
            label: '‚úï',
            textColor: Colors.white,
            onPressed: () {
              ScaffoldMessenger.of(context).hideCurrentSnackBar();
            },
          ),
        ),
      );
      
      // „ÉÅ„É£„ÉÉ„ÉàÂÜÖÈÄöÁü•„ÇÇËøΩÂä†
      final adkChatProvider = context.read<AdkChatProvider>();
      adkChatProvider.addPdfGeneratedMessage('üìÑ PDF„ÅÆÁîüÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ');
      
      // „Éó„É¨„Éì„É•„Éº„Ç®„É™„Ç¢„ÅÆÈÄöÁü•„ÇÇËøΩÂä†
      _addNotification('PDF„ÅÆÁîüÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü', SystemMessageType.pdfGenerated);
      
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‚ùå PDFÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: $e'),
          backgroundColor: Theme.of(context).colorScheme.error,
          duration: const Duration(seconds: 5),
          behavior: SnackBarBehavior.floating,
          margin: const EdgeInsets.only(top: 50, left: 16, right: 16),
          action: SnackBarAction(
            label: '‚úï',
            textColor: Colors.white,
            onPressed: () {
              ScaffoldMessenger.of(context).hideCurrentSnackBar();
            },
          ),
        ),
      );
      
      // „Ç®„É©„Éº„ÇÇ„ÉÅ„É£„ÉÉ„ÉàÂÜÖ„Å´ÈÄöÁü•
      final adkChatProvider = context.read<AdkChatProvider>();
      adkChatProvider.addErrorMessage('‚ùå PDFÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: $e');
      
      // „Éó„É¨„Éì„É•„Éº„Ç®„É™„Ç¢„ÅÆ„Ç®„É©„ÉºÈÄöÁü•„ÇÇËøΩÂä†
      _addNotification('PDFÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: $e', SystemMessageType.error);
    }
  }

  void _showPrintPreview(BuildContext context) async {
    try {
      await context.read<PreviewProvider>().showPrintPreview();
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‚ùå Âç∞Âà∑„Éó„É¨„Éì„É•„Éº„ÅÆË°®Á§∫„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: $e'),
          backgroundColor: Theme.of(context).colorScheme.error,
          duration: const Duration(seconds: 5),
          behavior: SnackBarBehavior.floating,
          margin: const EdgeInsets.only(top: 50, left: 16, right: 16),
          action: SnackBarAction(
            label: '‚úï',
            textColor: Colors.white,
            onPressed: () {
              ScaffoldMessenger.of(context).hideCurrentSnackBar();
            },
          ),
        ),
      );
    }
  }

  void _regenerateContent(BuildContext context) async {
    final previewProvider = context.read<PreviewProvider>();
    final adkChatProvider = context.read<AdkChatProvider>();

    if (previewProvider.htmlContent.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text('ÂÜçÁîüÊàê„Åô„Çã„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì'),
          behavior: SnackBarBehavior.floating,
          margin: const EdgeInsets.only(top: 50, left: 16, right: 16),
          action: SnackBarAction(
            label: '‚úï',
            textColor: Colors.white,
            onPressed: () {
              ScaffoldMessenger.of(context).hideCurrentSnackBar();
            },
          ),
        ),
      );
      return;
    }

    try {
      // PreviewProvider„ÅÆÂÜçÁîüÊàêÂá¶ÁêÜ„ÇíÈñãÂßã
      await previewProvider.regenerateContent();

      // Êó¢Â≠ò„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆË¶ÅÁ¥Ñ„ÇíÂèñÂæóÔºàPreviewProviderÂÜÖ„ÅßËß£ÊûêÊ∏à„ÅøÔºâ
      final contentSummary =
          previewProvider.extractContentSummary(previewProvider.htmlContent);

      // Open_SuperAgentÈ¢®„ÅÆÂÜçÁîüÊàê„Éó„É≠„É≥„Éó„Éà‰ΩúÊàê
      final regenerationPrompt = '''
ÁèæÂú®„ÅÆÂ≠¶Á¥öÈÄö‰ø°„ÇíÊîπÂñÑ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

„ÄêÁèæÂú®„ÅÆÂÜÖÂÆπ„Äë
$contentSummary

„ÄêË¶ÅÊ±Ç„Äë
- Âêå„Åò„ÉÜ„Éº„Éû„Å®ÊßãÈÄ†„ÇíÁ∂≠ÊåÅ„Åó„Å™„Åå„Çâ„ÄÅÂÜÖÂÆπ„Çí„Çà„ÇäÈ≠ÖÂäõÁöÑ„Å´Êõ∏„ÅçÁõ¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ
- Ë™≠„Åø„ÇÑ„Åô„Åï„Å®Ë¶™„Åó„Åø„ÇÑ„Åô„Åï„ÇíÂêë‰∏ä„Åï„Åõ„Å¶„Åè„Å†„Åï„ÅÑ
- ÈáçË¶Å„Å™ÊÉÖÂ†±„ÅØÊÆã„Åó„Å§„Å§„ÄÅË°®Áèæ„ÇíÊîπÂñÑ„Åó„Å¶„Åè„Å†„Åï„ÅÑ
- HTML„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅßÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ

Â≠¶Á¥öÈÄö‰ø°„ÅÆÂÜÖÂÆπ„ÇíÂÜçÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
''';

      // ADKChatProvider„Å´ÂÜçÁîüÊàê„Çí‰æùÈ†º
      adkChatProvider.sendMessage(regenerationPrompt);

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text('üîÑ „Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆÂÜçÁîüÊàê„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü...'),
          behavior: SnackBarBehavior.floating,
          margin: const EdgeInsets.only(top: 50, left: 16, right: 16),
          action: SnackBarAction(
            label: '‚úï',
            textColor: Colors.white,
            onPressed: () {
              ScaffoldMessenger.of(context).hideCurrentSnackBar();
            },
          ),
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‚ùå ÂÜçÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: $e'),
          backgroundColor: Theme.of(context).colorScheme.error,
          duration: const Duration(seconds: 5),
          behavior: SnackBarBehavior.floating,
          margin: const EdgeInsets.only(top: 50, left: 16, right: 16),
          action: SnackBarAction(
            label: '‚úï',
            textColor: Colors.white,
            onPressed: () {
              ScaffoldMessenger.of(context).hideCurrentSnackBar();
            },
          ),
        ),
      );
    }
  }

  void _openQuillEditor(BuildContext context) {
    html.window.open('/quill/', '_blank');
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Text('üìù Quill„Ç®„Éá„Ç£„Çø„ÇíÊñ∞„Åó„ÅÑ„Çø„Éñ„ÅßÈñã„Åç„Åæ„Åó„Åü'),
        duration: const Duration(seconds: 3),
        behavior: SnackBarBehavior.floating,
        margin: const EdgeInsets.only(top: 50, left: 16, right: 16),
        action: SnackBarAction(
          label: '‚úï',
          textColor: Colors.white,
          onPressed: () {
            ScaffoldMessenger.of(context).hideCurrentSnackBar();
          },
        ),
      ),
    );
  }

  void _showEditDialog(BuildContext context) {
    final previewProvider =
        Provider.of<PreviewProvider>(context, listen: false);
    showDialog(
        context: context,
        builder: (context) => AlertDialog(
              title: const Text('HTML„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆÁ∑®ÈõÜ'),
              content: SizedBox(
                width: double.maxFinite,
                child: QuillEditorWidget(),
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.of(context).pop(),
                  child: const Text('„Ç≠„É£„É≥„Çª„É´'),
                ),
                TextButton(
                  onPressed: () => _openQuillEditor(context),
                  child: const Text('Èñã„Åè'),
                ),
              ],
            ));
  }

  /// Êóß„Ç®„Éá„Ç£„Çø„ÉºÔºàSimpleHtmlEditorÔºâ„ÇíË°®Á§∫„Åô„Çã„ÉÄ„Ç§„Ç¢„É≠„Ç∞
  void _showLegacyEditor(BuildContext context, PreviewProvider previewProvider) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => Dialog(
        insetPadding: const EdgeInsets.all(40),
        child: SizedBox(
          width: MediaQuery.of(context).size.width * 0.8,
          height: MediaQuery.of(context).size.height * 0.8,
          child: Column(
            children: [
              // „Éò„ÉÉ„ÉÄ„Éº
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.grey.shade100,
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(8),
                    topRight: Radius.circular(8),
                  ),
                ),
                child: Row(
                  children: [
                    const Icon(Icons.text_fields, size: 20),
                    const SizedBox(width: 8),
                    const Text(
                      'Êóß„Ç®„Éá„Ç£„Çø„ÉºÔºà„ÉÜ„Ç≠„Çπ„Éà„Éô„Éº„ÇπÔºâ',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const Spacer(),
                    TextButton(
                      onPressed: () => Navigator.of(context).pop(),
                      child: const Text('Èñâ„Åò„Çã'),
                    ),
                  ],
                ),
              ),
              
              // „Ç®„Éá„Ç£„Çø„ÉºÈÉ®ÂàÜ
              Expanded(
                child: SimpleHtmlEditorWidget(
                  initialContent: previewProvider.htmlContent,
                  onContentChanged: (editedHtml) {
                    try {
                      previewProvider.updateHtmlContent(editedHtml);
                      _addNotification('Êóß„Ç®„Éá„Ç£„Çø„Éº„ÅßÁ∑®ÈõÜÂÜÖÂÆπ„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü', SystemMessageType.success);
                    } catch (e) {
                      _addNotification('Á∑®ÈõÜÂÜÖÂÆπ„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó: $e', SystemMessageType.error);
                    }
                  },
                  height: 400, // ÈÅ©Âàá„Å™È´ò„Åï„Å´Â§âÊõ¥
                ),
              ),
              
              // „Éï„ÉÉ„Çø„Éº
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.orange.shade50,
                  borderRadius: const BorderRadius.only(
                    bottomLeft: Radius.circular(8),
                    bottomRight: Radius.circular(8),
                  ),
                ),
                child: Row(
                  children: [
                    Icon(Icons.warning_amber, size: 16, color: Colors.orange.shade700),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        'Ê≥®ÊÑè: Êóß„Ç®„Éá„Ç£„Çø„Éº„ÅØHTML„ÅÆÊßãÈÄ†„Çí‰øùÊåÅ„Åó„Åæ„Åõ„Çì„ÄÇÁ∑®ÈõÜÂæå„ÄÅËâ≤„ÇÑ„Çπ„Çø„Ç§„É´„ÅåÂ§±„Çè„Çå„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ',
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.orange.shade700,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
